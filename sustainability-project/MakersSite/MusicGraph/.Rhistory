sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
sqldf("
create table public.tmp.test_tbl (a int, b int);
insert into public.tmp.test_tbl values (1,4);
insert into public.tmp.test_tbl values (2,5);
insert into public.tmp.test_tbl values (3,6);
", connection= con)
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
sqldf("
create table public.tmp.test_tbl (a int, b int);
insert into public.tmp.test_tbl values (1,4);
insert into public.tmp.test_tbl values (2,5);
insert into public.tmp.test_tbl values (3,6);
", connection= con)
sqldf("
create table test_tbl (a int, b int);
insert into test_tbl values (1,4);
insert into test_tbl values (2,5);
insert into test_tbl values (3,6);
", connection= con)
sqldf("
create table tmp (a int, b int);
insert into tmp values (1,4);
insert into tmp values (2,5);
insert into tmp values (3,6);
", connection= con)
dbExistsTable(con, c("tmp","test_tbl"))
sqldf("
create table tmp (a int, b int);
insert into tmp values (1,4);
insert into tmp values (2,5);
insert into tmp values (3,6);
", connection= con)
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
dbExistsTable(con, c("tmp","test_tbl"))
dbExistsTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- sqldf("select a, b, a+b as c from myTable", drv="SQLite")
dbDisconnect(con)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
db <- datasetsDb()
dbListTables(db)
dbReadTable(C02)
dbReadTable(db,"CO2")
dbGetQuery(db, "select * from CO2 where conc < 100")
sub <-dbGetQuery(db, "select * from CO2 where conc < 100")
library("ggplot")
library("ggplot2")
ggplot(aes(x=conc, y=uptake),data= sub)+geom_point()
co2table=dbReadTable(db,"CO2")
ggplot(aes(x=conc, y=uptake),data= co2table)+geom_point()
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()
library("dplyr")
library("rplyr")
library("plyr")
install.packages("dplyr")
library("dplyr")
detach("package:plyr", unload=TRUE)
library("ggplot2")
library("dplyr")
View(co2table)
co2.by_Treatment() <- co2table %>%
group_by(Treatment) %>%
summarise(
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
conc,
uptake,
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
conc= conc,
uptake= uptake,
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
group_by(co2table, )
?group_by()
group_by(co2table, Treatment)
co2.by_Treatment<-group_by(co2table, Treatment)
co2.by_Treatment<-groups(group_by(co2table, Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()+facet_wrap(~Treatment)
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()+facet_wrap(~Type)
ggplot(aes(y=conc, x=uptake, colour= Treatment),data= co2table)+geom_point()+facet_wrap(~Type)
sub <-dbGetQuery(db, "select * from CO2 where conc < 100")
sub <-dbGetQuery(db, "select * from CO2 where conc < 250")
ls=list()
rm(ls=list())
list()=ls
list=ls()
rm(list=ls())
library("RPostgreSQL")
library("sqldf")
library("ggplot2")
library("dplyr")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
sqldf("
create table test_tbl (a int, b int);
insert into test_tbl values (1,4);
insert into test_tbl values (2,5);
insert into test_tbl values (3,6);
", connection= con)
dbExistsTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- sqldf("select a, b, a+b as c from myTable", drv="SQLite")
db <- datasetsDb()
dbListTables(db)
co2table=dbReadTable(db,"CO2")
sub <-dbGetQuery(db, "select * from CO2 where conc < 250")
dbWriteTable(con, "CO2OverWrite", co2table)
dbListTables(db)
dbListTables(drv)
dbListTables(con)
dbDisconnect(con)
install.packages("surveillance")
.libPaths()
getwd()
thing <- read.csv(file = "scrobbles.tsv", sep="\t")
View(thing)
(rm(List=ls()))
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
install.packages("surveillance")
rm(List=ls())
rm(list=ls())
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
library("sparkR")
library("SparkR")
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
ggplot(aes(y=conc, x=uptake, colour= Treatment),data= co2table)+
geom_point()+facet_wrap(~Type)
View(scrobbles)
bootstrap <- read.csv(file= "bootstraps.tsv", sep = "\t")
View(bootstrap)
View(scrobbles)
library("magrittr")
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
library("dplyr")
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
summarise(scrobbles)
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
summarise(scrobbles)
summarise(scrobbles$artist.name)
summarise(scrobbles)
sparkR.stop()
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
summarise(scrobbles)
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
library("dplyr")
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
summarise(scrobbles)
summarize(group_by(scrobbles, scrobbles$artist.name ), count = n(scrobbles$artist.name))
group_by(scrobbles, scrobbles$artist.name )
summarize(group_by(scrobbles, as.character( scrobbles$artist.name) ), count = n(scrobbles$artist.name))
group_by(scrobbles, as.character( scrobbles$artist.name) )
summarize(groupBy(scrobbles, as.character( scrobbles$artist.name) ), count = n(scrobbles$artist.name))
groupBy(scrobbles, as.character( scrobbles$artist.name) )
groupBy(scrobbles, scrobbles$artist.name)
scrobbles$artist.name
as.charachter(scrobbles$artist.name)
as.character(scrobbles$artist.name)
group_by( scrobbles, as.character(scrobbles$artist.name))
group_by( scrobbles, as.character(scrobbles$artist.name))
summarise(scrobbles$artist.name)
summarise(as.character(scrobbles$artist.name))
group_by( scrobbles, as.character(scrobbles$artist.name))
group_by(scrobbles, as.character(scrobbles$artist.name))
View(scrobbles)
group_by(scrobbles, as.character(scrobbles$artist.name))
groupBy(scrobbles, as.character(scrobbles$artist.name))
group_by(scrobbles, as.character(scrobbles$artist.name))
sparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
sparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
SparkR::group_by(sparkScrobbles, sparkScrobbles$artist.name)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist.name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist.name), na.rm=T)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles,na.rm=T)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles[scrobbles$artist.name != NA])
scrobbles[scrobbles$artist.name != NA]
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
head(select(sparkScrobbles, sparkScrobbles$artist.name))
sparkScrobbles
head(select(sparkScrobbles, sparkScrobbles$artist_name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist_name))
SparkR::groupBy(sparkScrobbles, sparkScrobbles$artist_name)
summarize(SparkR::groupBy(sparkScrobbles, sparkScrobbles$artist_name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
summarize(groupBy(scrobbles, scrobbles$artist.name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(scrobbles, scrobbles$artist.name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(scrobbles, scrobbles$artist_name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
summarise(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
library("plyr")
SparkR::count(sparkScrobbles, vars=artist_name)
?SparkR::count()
?SparkR::count
plyr::count(sparkScrobbles, vars = artist.name)
plyr::count(scrobbles, vars = artist.name)
plyr::count(scrobbles, vars = scrobbles$artist.name)
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , SparkR::count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , SparkR::count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name)) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name))) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name))) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, !is.na(scrobbles$artist_name)) , count = n(!is.na(sparkScrobbles$artist_name)))
plyr::count(scrobbles, vars = scrobbles$artist.name)
install.packages(data.table)
install.packages("data.table")
library("data.table")
f6(scrobbles$artist.name)
f6 = function(x) {
data.table(x)[, .N, keyby = x]
}
f6(scrobbles$artist.name)
artistscounts <-f6(scrobbles$artist.name)
artistscounts$N
max(artistscounts$N)
artistscounts$N
sparkR.stop()
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
sparkArtists <- createDataFrame(sqlContext , artistscounts)
artistscounts <-as.dataframe(f6(scrobbles$artist.name))
artistscounts <-as.data.frame(f6(scrobbles$artist.name))
sparkArtists <- createDataFrame(sqlContext , artistscounts)
artistscounts <-f6(scrobbles$artist.name)
artistscounts <-as.data.frame.array(f6(scrobbles$artist.name))
sparkArtists <- createDataFrame(sqlContext , artistscounts)
write.csv(artistscounts)
write.csv(file="ArtistCounts.csv" ,data=artistscounts)
write.csv(file="ArtistCounts.csv" ,x=artistscounts)
artistscounts <-as.data.frame(f6(scrobbles$artist.name))
write.csv(file="ArtistCounts.csv" ,x=artistscounts)
length(unique(withTags$Artist))
library("plyr")
library("dplyr")
library("data.table")
withTags <- read.csv("lastfm.csv")
setwd("/Users/stephenkinser/MusicGraph")
withTags <- read.csv("lastfm.csv")
summary(withTags)
withTags$LN <- NULL
withTags<-cleanSpaces(withTags,3,7)
f6 = function(x) {
data.table(x)[, .N, keyby = x]
}
#http://stackoverflow.com/questions/22870198/is-there-a-more-efficient-way-to-replace-null-with-na-in-a-list
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
####need to do these three lines of code
#df2=data.frame(withTags$Artist ,  withTags$Tag.5)
#colnames(df2) <- c("Artist", "Tag")
#df1<- rbind(df1,df2)
multitosingle <- function(origin, start, end){
acc= na.omit(data.frame(origin[[1]],origin[[start]]))
colnames(acc) <- c("Artist", "Tag")
for (i in (start+1):end) {
df2=na.omit(data.frame(origin[[1]],origin[[i]]))
#print(df2)
colnames(df2) <- c("Artist", "Tag")
acc <-rbind(acc,df2)
}
return (acc)
}
##need to clean spaces
#withTags$Tag.1[as.character(withTags$Tag.1) == " "] <- NA
#withTags$Tag.2[as.character(withTags$Tag.2) == " "] <- NA
#withTags$Tag.3[as.character(withTags$Tag.3) == " "] <- NA
#....
cleanSpaces <- function(origin, start, end){
for (i in start:end){
origin[[i]][as.character(origin[[i]]) == " "] <- NA
}
return(origin)
}
withTags<-cleanSpaces(withTags,3,7)
adjlist <- multitosingle(withTags, 3,7)
morePreProcess =f6(adjlist$Tag)
bucket=morePreProcess[morePreProcess$N == 1]
setdiff(as.character(adjlist$Tag),as.character(bucket$x))
adjlist$Tag[  as.character(adjlist$Tag) %in% as.character(bucket$x) ] <- NA
adjlist= na.omit(adjlist)
length(unique(adjlist$Artist))
length(unique(withTags$Artist))
adjlist$Tag
group_by(adjlist$Tag)
group_by(as.character(adjlist$Tag))
group_by(adjlist,as.character(Tag))
group_by(adjlist,as.character(Tag))
?group_by
group_by(adjlist,Tag)
adjlist$Tag <- as.character(adjlist$Tag)
group_by(adjlist,Tag)
other <-group_by(adjlist,Tag)
other
aggregate(Tag~Artist, c, data= adjlist)
aggregate(Artist~Tag, c, data= adjlist)
?aggregate()
aggregate(Artist,Tag, data= adjlist)
aggregate(Artist, data= adjlist)
aggregate(Artist,c ,data= adjlist)
aggregate(Artist~Tag,c ,data= adjlist)
other<-aggregate(Artist~Tag,c ,data= adjlist)
other<-aggregate(~Tag,c ,data= adjlist)
other<-aggregate(Artist~Tag,c ,data= adjlist)
summary(withTags)
withTags$LN <- NULL
withTags<-cleanSpaces(withTags,3,7)
adjlist <- multitosingle(withTags, 3,7)
morePreProcess =f6(adjlist$Tag)
bucket=morePreProcess[morePreProcess$N == 1]
setdiff(as.character(adjlist$Tag),as.character(bucket$x))
adjlist$Tag[  as.character(adjlist$Tag) %in% as.character(bucket$x) ] <- NA
adjlist= na.omit(adjlist)
length(unique(adjlist$Artist))
length(unique(withTags$Artist))
other<-aggregate(Artist~Tag,c ,data= adjlist)
other
adjlist$Artist <- as.character(adjlist$Artist)
adjlist$Tag <- as.character(adjlist$Tag)
other<-aggregate(Artist~Tag,c ,data= adjlist)
other
other$Tag
other[1]
other[[1]]
other$Artist
other$Artist$001
other$Artist$'001'
adjlist<-melt(withTags, id=("Artist", "Count"))
adjlist<-melt(withTags, id=c("Artist" ,"Count"))
library("reshape")
install.packages("reshape")
setwd("/Users/stephenkinser/MusicGraph")
library("reshape")
adjlist<-melt(withTags, id=c("Artist" ,"Count"))
adjlist$variable <- NULL
adjlist$value <- as.character(adjlist$value)
morePreProcess =f6(adjlist$Tag)
bucket=morePreProcess[morePreProcess$N == 1]
morePreProcess =f6(adjlist$value)
bucket=morePreProcess[morePreProcess$N == 1]
setdiff(as.character(adjlist$Tag),as.character(bucket$x))
adjlist$value[  as.character(adjlist$value) %in% as.character(bucket$x) ] <- NA
adjlist= na.omit(adjlist)
adjlist$Artist <- as.character(adjlist$Artist)
other<-aggregate(Artist~Tag,c ,data= adjlist)
other<-aggregate(Artist~value,c ,data= adjlist)
other
view(other)
View(other)
mylist <- list(2,c(1,3),c(2,4),c(3,1))
names(mylist) <- c(1,2,3,4)
myadj <- stack(mylist)
myadj
myadj
stack(other)
stack(other$Artist)
g<-graph.data.frame(myadj)
library("igraph")
install.packages("igraph")
library("igraph")
stack(other$Artist)
g<-graph.data.frame(myadj)
plot(g)
?lapply
other$value$'001'
other<-aggregate(Artist~value,c ,data= adjlist)
other$value$'001'
other<-aggregate(Artist~value,c ,data= adjlist)
other$Artist$`001`
stack(other$Artist$`001`)
other$Artist[1]
stack(other$Artist[1])
other$Artist[1]
other$Artist[2]
other$Artist[1]
make_full_graph(2,directed = FALSE, loops= FALSE)
plot(make_full_graph(2,directed = FALSE, loops= FALSE))
N <- make_full_graph(2,directed = FALSE, loops= FALSE)
combn(1:3, 2)
combn(other$Artist[1])
combn(other$Artist[1],2)
combn(1:2, 2)
combn(other$Artist[1],2)
combn(1:3, 2)
other$Artist[1]
other$Artist[[1]]
combn(other$Artist[[1]],2)
combn(other$Artist[[2]],2)
combn(other$Artist[[3]],2)
other$Artist[[3]]
other$Artist[[4]]
combn(other$Artist[[4]],2)
length(other)
length(other$Artist)
adjacency_from_agg <- function(aggList){
#combn(aggList$Artist[[1]],2)
#combn(agglist$Artist[[4]],2)
acc = combn(aggList$Artist[[1]],2)
for(i in 2:length(aggList$Artist)){
tmp= combn(aggList$Artist[[i]],2)
acc = rbind(acc,tmp)
}
return (acc)
}
adjlist <- adjacency_from_agg(other)
acc = combn(aggList$Artist[[1]],2)
acc = combn(other$Artist[[1]],2)
tmp = combn(other$Artist[[5]],2)
acc <- rbind(acc,tmp)
View(tmp)
acc = t(combn(other$Artist[[1]],2))
tmp = t(combn(other$Artist[[5]],2))
acc <- rbind(acc,tmp)
adjacency_from_agg <- function(aggList){
#combn(aggList$Artist[[1]],2)
#combn(agglist$Artist[[4]],2)
#other$Artist[[1]]
#note: Because of how R works, the combn is one really long row instead of 2 col with a lot of rows,
#I could do a colbind and T at the end, but I'm lazy
#THUS SPOKE STEPHENTHUSTRA:
#acc = t(combn(other$Artist[[1]],2))
#tmp = t(combn(other$Artist[[5]],2))
#acc <- rbind(acc,tmp)
acc = t(combn(aggList$Artist[[1]],2))
for(i in 2:length(aggList$Artist)){
tmp= t(combn(aggList$Artist[[i]],2))
acc = rbind(acc,tmp)
}
return (acc)
}
adjlist <- adjacency_from_agg(other)
adjlist
View(adjlist)
graph.adjlist(adjlist)
alist <- adjacency_from_agg(other)
graph.adjlist(adjlist= alist)
artistGraph =graph.adjlist(adjlist= alist,duplicate = T)
View(adjlist)
artistGraph =graph.adjlist(adjlist= alist,duplicate = T)
write.csv(file="finalAdjlist.csv" ,x=adjlist)
install.packages("httr")
quit()

con <- dbConnect(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Swiss',
user='postgres', password='123456')
con <- dbConnect(drv, host='localhost', port='5432', dbname='postgres',
user='postgres', password='123456')
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='123456')
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
dbExistsTable(con, c("tmp","test_tbl"))
library(sqldf)
install.packages("sqldf")
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
library(sqldf)
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
library("sqldf")
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
sqldf("
create table tmp_test_tbl (a int, b int);
insert into tmp_test_tbl values (1,4);
insert into tmp_test_tbl values (2,5);
insert into tmp_test_tbl values (3,6);
", connection= con)
dbExistsTable(con, c("tmp","test_tbl"))
dbExistsTable(con, c("test_tbl"))
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
sqldf("
create table public.tmp.test_tbl (a int, b int);
insert into public.tmp.test_tbl values (1,4);
insert into public.tmp.test_tbl values (2,5);
insert into public.tmp.test_tbl values (3,6);
", connection= con)
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
sqldf("
create table public.tmp.test_tbl (a int, b int);
insert into public.tmp.test_tbl values (1,4);
insert into public.tmp.test_tbl values (2,5);
insert into public.tmp.test_tbl values (3,6);
", connection= con)
sqldf("
create table test_tbl (a int, b int);
insert into test_tbl values (1,4);
insert into test_tbl values (2,5);
insert into test_tbl values (3,6);
", connection= con)
sqldf("
create table tmp (a int, b int);
insert into tmp values (1,4);
insert into tmp values (2,5);
insert into tmp values (3,6);
", connection= con)
dbExistsTable(con, c("tmp","test_tbl"))
sqldf("
create table tmp (a int, b int);
insert into tmp values (1,4);
insert into tmp values (2,5);
insert into tmp values (3,6);
", connection= con)
sqldf("
create table tmp.test_tbl (a int, b int);
insert into tmp.test_tbl values (1,4);
insert into tmp.test_tbl values (2,5);
insert into tmp.test_tbl values (3,6);
", connection= con)
dbExistsTable(con, c("tmp","test_tbl"))
dbExistsTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- sqldf("select a, b, a+b as c from myTable", drv="SQLite")
dbDisconnect(con)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
db <- datasetsDb()
dbListTables(db)
dbReadTable(C02)
dbReadTable(db,"CO2")
dbGetQuery(db, "select * from CO2 where conc < 100")
sub <-dbGetQuery(db, "select * from CO2 where conc < 100")
library("ggplot")
library("ggplot2")
ggplot(aes(x=conc, y=uptake),data= sub)+geom_point()
co2table=dbReadTable(db,"CO2")
ggplot(aes(x=conc, y=uptake),data= co2table)+geom_point()
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()
library("dplyr")
library("rplyr")
library("plyr")
install.packages("dplyr")
library("dplyr")
detach("package:plyr", unload=TRUE)
library("ggplot2")
library("dplyr")
View(co2table)
co2.by_Treatment() <- co2table %>%
group_by(Treatment) %>%
summarise(
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
conc,
uptake,
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
co2.by_Treatment <- co2table %>%
group_by(Treatment) %>%
summarise(
conc= conc,
uptake= uptake,
mean_conc = mean(conc),
median_conc = median(conc),
mean_uptake = mean(uptake),
median_uptake= median(uptake),
n= n())%>%
arrange(Treatment)
group_by(co2table, )
?group_by()
group_by(co2table, Treatment)
co2.by_Treatment<-group_by(co2table, Treatment)
co2.by_Treatment<-groups(group_by(co2table, Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point(colours(Treatment))
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()+facet_wrap(~Treatment)
ggplot(aes(y=conc, x=uptake),data= co2table)+geom_point()+facet_wrap(~Type)
ggplot(aes(y=conc, x=uptake, colour= Treatment),data= co2table)+geom_point()+facet_wrap(~Type)
sub <-dbGetQuery(db, "select * from CO2 where conc < 100")
sub <-dbGetQuery(db, "select * from CO2 where conc < 250")
ls=list()
rm(ls=list())
list()=ls
list=ls()
rm(list=ls())
library("RPostgreSQL")
library("sqldf")
library("ggplot2")
library("dplyr")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432',
user='postgres', password='7edbcb48')
sqldf("
create table test_tbl (a int, b int);
insert into test_tbl values (1,4);
insert into test_tbl values (2,5);
insert into test_tbl values (3,6);
", connection= con)
dbExistsTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- dbReadTable(con, c("test_tbl"))
myTable <- sqldf("select a, b, a+b as c from myTable", drv="SQLite")
db <- datasetsDb()
dbListTables(db)
co2table=dbReadTable(db,"CO2")
sub <-dbGetQuery(db, "select * from CO2 where conc < 250")
dbWriteTable(con, "CO2OverWrite", co2table)
dbListTables(db)
dbListTables(drv)
dbListTables(con)
dbDisconnect(con)
install.packages("surveillance")
.libPaths()
getwd()
thing <- read.csv(file = "scrobbles.tsv", sep="\t")
View(thing)
(rm(List=ls()))
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
install.packages("surveillance")
rm(List=ls())
rm(list=ls())
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
library("sparkR")
library("SparkR")
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
ggplot(aes(y=conc, x=uptake, colour= Treatment),data= co2table)+
geom_point()+facet_wrap(~Type)
View(scrobbles)
bootstrap <- read.csv(file= "bootstraps.tsv", sep = "\t")
View(bootstrap)
View(scrobbles)
library("magrittr")
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
library("dplyr")
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
summarise(scrobbles)
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
summarise(scrobbles)
summarise(scrobbles$artist.name)
summarise(scrobbles)
sparkR.stop()
scrobbles <- read.csv(file = "scrobbles.tsv", sep="\t")
summarise(scrobbles)
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
library("dplyr")
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
summarise(scrobbles)
summarize(group_by(scrobbles, scrobbles$artist.name ), count = n(scrobbles$artist.name))
group_by(scrobbles, scrobbles$artist.name )
summarize(group_by(scrobbles, as.character( scrobbles$artist.name) ), count = n(scrobbles$artist.name))
group_by(scrobbles, as.character( scrobbles$artist.name) )
summarize(groupBy(scrobbles, as.character( scrobbles$artist.name) ), count = n(scrobbles$artist.name))
groupBy(scrobbles, as.character( scrobbles$artist.name) )
groupBy(scrobbles, scrobbles$artist.name)
scrobbles$artist.name
as.charachter(scrobbles$artist.name)
as.character(scrobbles$artist.name)
group_by( scrobbles, as.character(scrobbles$artist.name))
group_by( scrobbles, as.character(scrobbles$artist.name))
summarise(scrobbles$artist.name)
summarise(as.character(scrobbles$artist.name))
group_by( scrobbles, as.character(scrobbles$artist.name))
group_by(scrobbles, as.character(scrobbles$artist.name))
View(scrobbles)
group_by(scrobbles, as.character(scrobbles$artist.name))
groupBy(scrobbles, as.character(scrobbles$artist.name))
group_by(scrobbles, as.character(scrobbles$artist.name))
sparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
library("SparkR", lib.loc ="/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6/R/lib")
sparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::group_by(scrobbles, as.character(scrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
SparkR::group_by(sparkScrobbles, sparkScrobbles$artist.name)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
SparkR::group_by(sparkScrobbles, as.character(sparkScrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist.name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist.name), na.rm=T)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles,na.rm=T)
sparkScrobbles <- createDataFrame(sqlContext , scrobbles[scrobbles$artist.name != NA])
scrobbles[scrobbles$artist.name != NA]
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
sparkScrobbles <- createDataFrame(sqlContext , scrobbles)
head(select(sparkScrobbles, sparkScrobbles$artist.name))
sparkScrobbles
head(select(sparkScrobbles, sparkScrobbles$artist_name))
SparkR::groupBy(sparkScrobbles, as.character(sparkScrobbles$artist_name))
SparkR::groupBy(sparkScrobbles, sparkScrobbles$artist_name)
summarize(SparkR::groupBy(sparkScrobbles, sparkScrobbles$artist_name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
summarize(groupBy(scrobbles, scrobbles$artist.name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(scrobbles, scrobbles$artist.name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(scrobbles, scrobbles$artist_name) , count = n(scrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
summarise(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
dplyr::group_by(scrobbles, as.character(scrobbles$artist.name))
library("plyr")
SparkR::count(sparkScrobbles, vars=artist_name)
?SparkR::count()
?SparkR::count
plyr::count(sparkScrobbles, vars = artist.name)
plyr::count(scrobbles, vars = artist.name)
plyr::count(scrobbles, vars = scrobbles$artist.name)
summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , SparkR::count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , SparkR::count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, scrobbles$artist_name) , count = n(sparkScrobbles$artist_name))
SparkR::summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(sparkScrobbles$artist_name)))
summarize(SparkR::groupBy(sparkScrobbles, as.character(scrobbles$artist_name)) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name)) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name))) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, as.character(!is.na(scrobbles$artist_name))) , count = n(as.character(!is.na(sparkScrobbles$artist_name))))
summarize(SparkR::groupBy(sparkScrobbles, !is.na(scrobbles$artist_name)) , count = n(!is.na(sparkScrobbles$artist_name)))
plyr::count(scrobbles, vars = scrobbles$artist.name)
install.packages(data.table)
install.packages("data.table")
library("data.table")
f6(scrobbles$artist.name)
f6 = function(x) {
data.table(x)[, .N, keyby = x]
}
f6(scrobbles$artist.name)
artistscounts <-f6(scrobbles$artist.name)
artistscounts$N
max(artistscounts$N)
artistscounts$N
sparkR.stop()
sc = sparkR.init(sparkHome = '/Users/stephenkinser/spark-1.4.1-bin-hadoop2.6')
sqlContext <- sparkRSQL.init(sc)
sparkArtists <- createDataFrame(sqlContext , artistscounts)
artistscounts <-as.dataframe(f6(scrobbles$artist.name))
artistscounts <-as.data.frame(f6(scrobbles$artist.name))
sparkArtists <- createDataFrame(sqlContext , artistscounts)
artistscounts <-f6(scrobbles$artist.name)
artistscounts <-as.data.frame.array(f6(scrobbles$artist.name))
sparkArtists <- createDataFrame(sqlContext , artistscounts)
write.csv(artistscounts)
write.csv(file="ArtistCounts.csv" ,data=artistscounts)
write.csv(file="ArtistCounts.csv" ,x=artistscounts)
artistscounts <-as.data.frame(f6(scrobbles$artist.name))
write.csv(file="ArtistCounts.csv" ,x=artistscounts)
install.packages('RMongo')
install.packages('rmongodb')
list=c(2,3,4,5)
1/list
library("ggplot2")
x=c(1,2,3,4)
y=2*x
ggplot()+geom_line(aes(x=x, y=y))
y=x*x
ggplot()+geom_line(aes(x=x, y=y))
x=c(-1,0,1,2,3,4)
y=x*x
ggplot()+geom_line(aes(x=x, y=y))
x=c(-1,0,1,2,3,4,5,6,7)
y=x*x
ggplot()+geom_line(aes(x=x, y=y))
pytho <- function(x,y,z){
return(sqrt(x*x + y*y + z*z ))
}
pytho(-2,2,1)
rm(list=ls())
setwd("C:/Users/Stephen/Documents/GitHub/College")
library("ggplot2")
rm(list=ls())
setwd("C:/Users/Stephen/Documents/GitHub/College")
library("ggplot2")
setwd("C:/Users/Stephen/Documents/GitHub/College")
setwd("/Users/stephenkinser/college")
library("ggplot2")
uncleaned <- read.csv("DataMunged.csv")
x=c(-1,0,1,2,3,4,5,6,7)
y=x*x
ggplot()+geom_line(aes(x=x, y=y))
uncleaned$Yale.inflation.not.taken.into.account.=uncleaned$Yale.inflation.not.taken.into.account.*(uncleaned$Interest.rate+1)
#update the numbers based on the Harvard Numbers
indexof05=match(2005, uncleaned$Year)
#misread some info when munging, to fix
uncleaned$Harvard.based.on.2007.=uncleaned$Harvard.based.on.2007.*(uncleaned$Interest.rate[indexof05]+1)
uncleaned$Minimum.Wage.in.2012.Dollars=as.numeric(gsub("\\$","",uncleaned$Minimum.Wage.in.2012.Dollars)) *
(uncleaned$Interest.rate[match(2012, uncleaned$Year)]+1)
uncleaned$Public.Education..2013.=as.numeric(gsub(",","",uncleaned$Public.Education..2013.))
uncleaned$Private.Education..2013.=as.numeric(gsub(",","",uncleaned$Private.Education..2013.))
uncleaned$Minimum.Wage.in.2012.Dollars*40*52
ggplot(data=uncleaned,aes(Year))+
geom_line(aes(y=Harvard.based.on.2007.), colour="red")+
geom_line(aes(y=Yale.inflation.not.taken.into.account.), colour = "blue")+
geom_line(aes(y=Public.Education..2013.), colour= "#CCA352")+
geom_line(aes(y=Private.Education..2013.), colour="purple")+
geom_line(aes(y=Minimum.Wage.in.2012.Dollars*40*26), colour="green")+
ggtitle("1976-2013 tuition cost per semester")
ggplot(data=uncleaned,aes(Year))+
geom_line(aes(y=Harvard.based.on.2007.), colour="red")+
geom_line(aes(y=Yale.inflation.not.taken.into.account.), colour = "blue")+
geom_line(aes(y=Public.Education..2013.), colour= "#CCA352")+
geom_line(aes(y=Private.Education..2013.), colour="purple")+
geom_line(aes(y=Minimum.Wage.in.2012.Dollars*40*26), colour="green")+
ggtitle("1976-2013 tuition cost per semester")
uncl <- read.csv("1964Data.csv")
indexof05=match(2005, uncl$Year)
uncl$Harvard.based.on.2007.=uncl$Harvard.based.on.2007.*(uncl$Interest.Rate[indexof05]+1)
uncl$Minimum.Wage.in.2012.Dollars=as.numeric(gsub("\\$","",uncl$Minimum.Wage.in.2012.Dollars)) *
(uncl$Interest.Rate[match(2012, uncl$Year)]+1)
uncleaned$Harvard.based.on.2007.=uncleaned$Harvard.based.on.2007.*(uncleaned$Interest.rate[indexof05]+1)
uncleaned$Minimum.Wage.in.2012.Dollars=as.numeric(gsub("\\$","",uncleaned$Minimum.Wage.in.2012.Dollars)) *
(uncleaned$Interest.rate[match(2012, uncleaned$Year)]+1)
uncl$Public.Education..2013.=as.numeric(gsub(",","",uncl$Public.Education..2013.))
uncl$Private.Education..2013.=as.numeric(gsub(",","",uncl$Private.Education..2013.))
ggplot(data=uncl,aes(Year))+
geom_line(aes(y=Harvard.based.on.2007.), colour="red")+
geom_line(aes(y=Public.Education..2013.), colour= "#CCA352")+
geom_line(aes(y=Private.Education..2013.), colour="purple")+
geom_line(aes(y=Minimum.Wage.in.2012.Dollars*40*26), colour="green")+
geom_line(aes(y=Minimum.Wage.in.2012.Dollars*60*26), colour="cyan")+
ggtitle("1964-2013 tuition cost per semester")
rm(list=ls())
library("dplyr")
setwd("/Users/stephenkinser/mtsu-makers/sustainability-project/MakersSite")
my_db<- src_sqlite("db.sqlite3", create= F)
tempHumidity<- tbl(my_db, "tempHumidity_temphumidity")
explain(tempHumidity)
?tbl
sortedreport=sort(report)
report=c(590,815,575,608,350,1285,408,540,555,679)
#a. Calculate and interpret the sample mean and median.
samplemean= mean(report)
samplemedian= median(report)
print(samplemean)
print(samplemedian)
#b. Suppose the 6th observation had been 985 rather than
#1285. How would the mean and median change?
report[6]=985
samplemean= mean(report)
samplemedian= median(report)
print(samplemean)
print(samplemedian)
#the median would be the same, however the mean would be lower since the highes value (max would be lower)
#c. Calculate a 20% trimmed mean by first trimming the two
#smallest and two largest observations.
sortedreport=sort(report)
sortedreport[3:(length(sortedreport)-2)]
trimmedmean=mean(sortedreport)
print(trimmedmean)
sortedreport=sortedreport[1:(length(sortedreport)-1)]
trimmedmean=mean(sortedreport)
alcohol=c(15.0, 13.0, 18.0, 14.5, 12.0, 11.0, 8.9, 8.0)
alcSample= mean(alcohol)
alcSampleMedian= median(alcohol)
alcSamplemean= mean(alcohol)
alcSampleMedian= median(alcohol)
alcSamplemean= mean(alcohol, trim = 12.5)
alcSamplemean= mean(alcohol)
alctrimmedmean= mean(alcohol, trim = 12.5)
alcSamplemean= mean(alcohol)
alcSampleMedian= median(alcohol)
alctrimmedmean= mean(alcohol, trim = 12.5)
print(alctrimmedmean)
print(alcSamplemean)
print(alcSampleMedian)
print(alctrimmedmean)
alctrimmedmean= mean(alcohol, trim = .125)
print(alcSamplemean)
print(alcSampleMedian)
print(alctrimmedmean)
alternativeTrimmedmean= mean(report, trim=.07)
print(alternativeTrimmedmean)
print(trimmedmean)
sortedreport=sort(report)
sortedreport=sortedreport[1:(length(sortedreport)-1)]
trimmedmean=mean(sortedreport)
print(trimmedmean)
print(alternativeTrimmedmean)
min(alchol)
min(alcohol)
alcSampleMedian-min(alcohol)
newval=alcSampleMedian-min(alcohol)
print(newval)
length(newal)
length(alcohol)
sort(alcohol)
sort(alcohol)[length(alcohol)/2]
sort(alcohol)[length(alcohol)/2]-min(alcohol)
print(newval)
sort(alcohol)[(length(alcohol)/2)+1]
tuple=c(sort(alcohol)[length(alcohol)/2], sort(alcohol)[(length(alcohol)/2)+1])
print(tuple)
alcSamplemean*2.2
proof=alcSamplemean*2.2
proof2= mean(alcohol*2.2)
proof==proof2
result=proof==proof2
print("proof:", proof)
sprintf("proof:", proof)
proof=alcSamplemean*2.2
proof2= mean(alcohol*2.2)
result=proof==proof2
sprintf("proof:", proof)
sprintf("proof: %f", proof)
snow= c(6.5 ,12.0 ,14.9 ,10.0 ,10.7 ,7.9 ,21.9 ,12.5 ,14.5 ,9.2)
mean(snow)
median(snow)
qplot(snow)
qplot(x=snow)
qplot(y=snow)
qplot(y=sort(snow)
qplot(y=sort(snow))
qplot(y=sort(snow))
